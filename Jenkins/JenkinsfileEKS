pipeline {
    agent any

    environment {
        AWS_CREDENTIALS_ID = 'aws-creds'
        CLUSTER_NAME = 'app-clus'
        REGION = 'us-west-2'
    }

    stages {
        stage('Configure AWS CLI') {
            steps {
                script {
                    withCredentials([aws(credentialsId: 'aws-creds', var: 'AWS_CREDENTIALS')]) {
                        echo "⚙️ Configuring AWS CLI using Jenkins credentials..."
                        sh """
                            # Configure AWS CLI using credentials from Jenkins
                            # AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY are automatically set by withCredentials block
                            aws configure set aws_access_key_id \$AWS_ACCESS_KEY_ID
                            aws configure set aws_secret_access_key \$AWS_SECRET_ACCESS_KEY
                            aws configure set default.region ${REGION}
                            echo "✅ AWS CLI configured."
                        """
                    }
                }
            }
        }

        stage('Check for Existing EKS Cluster') {
            steps {
                script {
                    echo "🔍 Checking if EKS cluster '${CLUSTER_NAME}' already exists..."
                    withAWS(credentials: "${AWS_CREDENTIALS_ID}", region: "${REGION}") {
                        def clusterStatus = sh(
                            script: """
                                aws eks describe-cluster \
                                    --name ${CLUSTER_NAME} \
                                    --region ${REGION} \
                                    --query 'cluster.status' \
                                    --output text || echo "NOTFOUND"
                            """,
                            returnStdout: true
                        ).trim()

                        if (clusterStatus == "ACTIVE" || clusterStatus == "CREATING") {
                            echo "✅ Cluster '${CLUSTER_NAME}' already exists with status: ${clusterStatus}"
                            currentBuild.result = 'SUCCESS'
                            return
                        } else {
                            echo "🚀 Cluster not found. Proceeding to creation..."
                        }
                    }
                }
            }
        }

        stage('Create EKS Cluster') {
            when {
                expression {
                    currentBuild.result != 'SUCCESS'
                }
            }
            steps {
                script {
                    withAWS(credentials: "${AWS_CREDENTIALS_ID}", region: "${REGION}") {
                        echo "🚀 Creating new EKS cluster from configuration file..."
                        sh """
                            set -e
                            eksctl create cluster -f Scripts/cluster-config.yaml
                        """
                    }
                }
            }
        }

        stage('Create IAM Identity Mapping') {
            steps {
                script {
                    withCredentials([aws(credentialsId: 'aws-creds', var: 'AWS_CREDENTIALS')]) {
                        echo "⚙️ Creating IAM identity mapping for the EKS cluster..."
                        sh """
                            eksctl create iamidentitymapping \
                                --cluster app-clus \
                                --region us-west-2 \
                                --arn arn:aws:iam::799344209838:role/Project-Role-K8 \
                                --username ubuntu \
                                --group system:masters
                    
                            echo "✅ IAM identity mapping created."
                        """
                    }
                }
            }
        }

        stage('Update kubeconfig') {
            steps {
                script {
                    echo "🔄 Updating kubeconfig for EKS cluster '${CLUSTER_NAME}'..."
                    withAWS(credentials: "${AWS_CREDENTIALS_ID}", region: "${REGION}") {
                        sh """
                            aws eks update-kubeconfig \\
                            --name ${CLUSTER_NAME} \\
                            --region ${REGION} \\
                            --alias ${CLUSTER_NAME}
                        """
                        echo '✅ kubeconfig updated successfully.'

                        echo '✅ Varifying connectivity.'

                        sh "kubectl get nodes"
                    }
                }
            }
        }

        stage('Wait for Node Readiness') {
            steps {
                script {
                    withAWS(credentials: "${AWS_CREDENTIALS_ID}", region: "${REGION}") {
                    echo "⏳ Waiting for EKS nodes to become ready..."
                        timeout(time: 10, unit: 'MINUTES') {
                            waitUntil {
                                def readyNodes = sh(
                                    script: "kubectl get nodes --no-headers | grep 'Ready' | wc -l",
                                    returnStdout: true
                                ).trim().toInteger()
                                echo "Nodes Ready: ${readyNodes}"
                                return readyNodes > 0
                            }
                        }
                    }
              
                    echo "✅ EKS nodes are ready."
                }
            }
        }

        stage('Install ArgoCD') {
            steps {
                script {
                    withAWS(credentials: 'aws-creds', region: REGION) {
                        echo "🚀 Installing ArgoCD using Helm..."
                        sh """
                            # Check if namespace 'argocd' exists
                            if ! kubectl get namespace argocd >/dev/null 2>&1; then
                                echo "📦 Creating 'argocd' namespace..."
                                kubectl create namespace argocd
                            else
                                echo "✅ Namespace 'argocd' already exists. Skipping creation."
                            fi

                            # Add and update ArgoCD Helm repo
                            helm repo add argo https://argoproj.github.io/argo-helm || true
                            helm repo update

                            # Check if ArgoCD is already installed
                            if helm status argocd -n argocd >/dev/null 2>&1; then
                                echo "✅ ArgoCD is already installed in namespace 'argocd'. Skipping Helm install."
                            else
                               echo "🚀 Installing ArgoCD with Helm..."
                                helm install argocd argo/argo-cd \\
                                    --namespace argocd \\
                                    --set server.service.type=ClusterIP \\
                                    --set installCRDs=true
                            fi
                        """
                    }
                }
            }
        }

        stage('Deploy ArgoCD Ingress') {
            steps {
                script {
                    withCredentials([aws(credentialsId: 'aws-creds', var: 'AWS_CREDENTIALS')]) {
                        echo '🚀 Deploying argocd-ingress.yaml...'
                        sh 'kubectl apply -f K8s/Ingress/argo/argocd-ingress.yaml'
                    }
                }
            }
        }

        stage('Apply ArgoCD Application File') {
            steps {
                script {
                    withAWS(credentials: 'aws-creds', region: REGION) {
                        echo "checking for argocd CRD"
                        sh '''
                            if ! kubectl get crd applications.argoproj.io > /dev/null 2>&1; then
                            echo "❌ ArgoCD CRD missing!"
                            exit 1
                            fi
                        '''
                        echo "🚀 Applying ArgoCD Application manifest..."
                        sh '''
                            # Apply the ArgoCD Application manifest for your application deployments
                            kubectl apply -f ArgoCD-config/argo-app-main.yaml -n argocd --validate=false
                    
                            # Apply the ArgoCD Application manifest for your application's ingress
                            kubectl apply -f ArgoCD-config/argo-app-ingress.yaml -n argocd --validate=false

                        '''
                        echo "✅ ArgoCD Application has been applied."
                    }
                }
            }
        }

        stage('Create Kubernetes DB Secret') {
            steps {
                withAWS(credentials: 'aws-creds', region: REGION) {
                    script {
                        echo "🔐 Fetching DB credentials from AWS Secrets Manager..."
                
                        sh """
                            aws secretsmanager get-secret-value \
                                --secret-id db-secrets \
                                --query SecretString \
                                --output text > db-secrets.env
                        
                            kubectl create secret generic db-credentials \
                                --from-env-file=db-secrets.env \
                                -n default --dry-run=client -o yaml | kubectl apply -f -
                        """
                    }
                }
            }
        }
    }

    post {
        success {
            echo '✅ EKS cluster creation, ArgoCD installation, and application deployment completed (or already existed).'
        }
        failure {
            echo '❌ EKS cluster creation or ArgoCD installation job failed.'
        }
    }
}








