pipeline {
    agent any
    environment {
        CLUSTER_NAME = 'app-clus'
        REGION       = 'us-west-2'
        GRAFANA_PASSWORD_CRED_ID = 'grafana-admin-pass'
        APP_NAME     = 'my-app'
        EXTERNAL_IP  = ''
    }

    stages {

        stage('Update kubeconfig') {
            steps {
                script {
                    withAWS(credentials: 'aws-creds', region: REGION) {
                        echo "üîÑ Updating kubeconfig for EKS cluster '${CLUSTER_NAME}'..."
                        sh """
                            aws eks update-kubeconfig --name ${CLUSTER_NAME} --region ${REGION} --alias ${CLUSTER_NAME}
                            kubectl config use-context ${CLUSTER_NAME}
                            kubectl get nodes --context=${CLUSTER_NAME}
                        """
                    }
                }
            }
        }

        stage('Patch CNI Plugin (Conditional)') {
            steps {
                script {
                    echo "üîç Checking CNI version..."
                    def currentCNI = sh(script: "kubectl describe daemonset aws-node -n kube-system | grep Image | head -n1", returnStdout: true).trim()
                    if (!currentCNI.contains("v1.19.5")) {
                        echo "‚öôÔ∏è Patching CNI to v1.19.5"
                        sh "kubectl apply -f https://raw.githubusercontent.com/aws/amazon-vpc-cni-k8s/v1.19.5/config/master/aws-k8s-cni.yaml"
                    } else {
                        echo "‚úÖ CNI already at desired version."
                    }
                }
            }
        }

        stage('Install Ingress Controller') {
            steps {
                script {
                    withAWS(credentials: 'aws-creds', region: REGION) {
                        echo 'üöÄ Installing NGINX Ingress Controller...'
                        sh '''
                            helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx || true
                            helm repo update

                            helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx \
                              --namespace ingress-nginx --create-namespace \
                              --set controller.service.type=LoadBalancer \
                              --set controller.publishService.enabled=true \
                              --set controller.scope.enabled=false
                        '''
                    }
                }
            }
        }

        stage('Wait for LoadBalancer & Update Values') {
            steps {
                script {
                    withAWS(credentials: 'aws-creds', region: REGION) {
                        echo '‚è≥ Waiting for LoadBalancer hostname...'
                        timeout(time: 8, unit: 'MINUTES') {
                            waitUntil {
                                def lb = sh(
                                    script: "kubectl get svc ingress-nginx-controller -n ingress-nginx -o jsonpath='{.status.loadBalancer.ingress[0].hostname}{.status.loadBalancer.ingress[0].ip}'",
                                    returnStdout: true
                                ).trim()
                                echo "LoadBalancer address: ${lb}"
                                return lb != ''
                            }
                       }

                        echo 'üîç Fetching external hostname from NGINX Ingress...'
                        def albDns = sh(
                            script: "kubectl get svc ingress-nginx-controller -n ingress-nginx -o jsonpath='{.status.loadBalancer.ingress[0].hostname}'",
                            returnStdout: true
                        ).trim()

                        if (!albDns) {
                            echo "Hostname not found, trying IP..."
                            albDns = sh(
                                script: "kubectl get svc ingress-nginx-controller -n ingress-nginx -o jsonpath='{.status.loadBalancer.ingress[0].ip}'",
                                returnStdout: true
                            ).trim()
                        }

                        if (!albDns) {
                            error "‚ùå External hostname/IP not found for ingress-nginx-controller service!"
                        }

                        env.ALB_DNS = albDns
                        echo "‚û°Ô∏è LoadBalancer external hostname/IP: ${albDns}"

                        // Replace placeholders in values files
                        sh """
                            sed -i 's|__ALB_DNS__|${albDns}|g' Prometheus/prometheus-values.yaml
                            sed -i 's|__ALB_DNS__|${albDns}|g' ArgoCD/argocd-values.yaml
                        """

                        // Commit updated values files to repo
                        sh """
                            git config user.email "ci-bot@example.com"
                            git config user.name "CI Bot"
                            git add Prometheus/prometheus-values.yaml ArgoCD/argocd-values.yaml
                            git commit -m "Update ALB DNS to ${albDns}" || echo "No changes to commit"
                            git push origin HEAD:feature || true
                        """
                    }
                }
            }
        }

        stage('Install/Upgrade Prometheus & Upgrade ArgoCD') {
            steps {
                script {
                    withAWS(credentials: 'aws-creds', region: REGION) {
                        // Install or upgrade Prometheus stack (includes Alertmanager UI)
                        sh '''
                            helm repo add prometheus-community https://prometheus-community.github.io/helm-charts || true
                            helm repo update

                            if helm ls -n monitoring | grep -q prometheus; then
                                echo "üîÑ Upgrading existing Prometheus release..."
                                helm upgrade prometheus prometheus-community/kube-prometheus-stack \
                                    --namespace monitoring \
                                    -f Prometheus/prometheus-values.yaml \
                                    --set ingress.enabled=false
                            else
                                echo "üöÄ Installing new Prometheus release..."
                                helm install prometheus prometheus-community/kube-prometheus-stack \
                                    --namespace monitoring --create-namespace \
                                    -f Prometheus/prometheus-values.yaml \
                                    --set ingress.enabled=false \
                                    --set installCRDs=true
                            fi
                        '''

                        // Upgrade ArgoCD only (already installed in previous Jenkinsfile)
                        sh '''
                            helm upgrade argocd argo/argo-cd \
                                -n argocd \
                                -f ArgoCD/argocd-values.yaml
                        '''
                    }
                }
            }
        }
        
        stage('Wait for Grafana Pod & Apply Unified Ingress') {
            steps {
                script {
                    withAWS(credentials: 'aws-creds', region: REGION) {
                        echo '‚è≥ Waiting for Grafana pod...'
                        timeout(time: 8, unit: 'MINUTES') {
                            waitUntil {
                                sh(script: "kubectl get pods -n monitoring -l app.kubernetes.io/name=grafana --field-selector=status.phase=Running | grep grafana", returnStatus: true) == 0
                            }
                        }
                        echo '‚úÖ Grafana running.'
                        echo 'üöÄ Applying unified Ingress...'
                        sh 'kubectl apply -f K8s/Ingress/monitoring/monitoring-ingress.yaml'
                    }
                }
            }
        }

        stage('Configure Grafana Admin Password') {
            steps {
                withAWS(credentials: 'aws-creds', region: REGION) {
                    withCredentials([string(credentialsId: GRAFANA_PASSWORD_CRED_ID, variable: 'GRAFANA_PASSWORD')]) {
                        echo 'üîê Creating Grafana admin-password secret...'
                        sh '''
                        kubectl create secret generic grafana-admin-password \
                        --from-literal=admin-password="${GRAFANA_PASSWORD}" \
                        -n monitoring --dry-run=client -o yaml | kubectl apply -f -
                        '''
                        echo 'üîÑ Upgrading Prometheus release so Grafana picks custom secret...'
                        helm upgrade prometheus prometheus-community/kube-prometheus-stack \
                            --namespace monitoring \
                            -f Prometheus/prometheus-values.yaml

                        echo '‚è≥ Waiting for Grafana pods to restart...'
                        kubectl rollout status deployment/prometheus-grafana -n monitoring --timeout=5m

                        echo '‚úÖ Grafana configured with custom admin password.'
                    }
                }
            }
        }

        stage('Capture Cluster Configurations') {
            steps {
                script {
                    echo "üìù Capturing cluster configurations and errors using script"
                    sh '''
                        # Run the script from the Scripts directory
                        bash Scripts/capture-configs.sh

                        bash Scripts/collect-error.sh
                    '''
                    echo "‚úÖ Cluster configurations and errors captured successfully."
                }
            }
        }

        stage('Commit and Push Ingress Files to Repo') {
            steps {
                script {
                    echo "üìù Configuring git and pushing changes..."
                    withCredentials([usernamePassword(credentialsId: 'git-creds', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASS')]) {
                        sh '''
                            git config user.email "jenkins@mail.com"
                            git config user.name "Jenkins CI"
                            git add Prometheus/prometheus-values.yaml
                            git commit -m "Update external IP to ${EXTERNAL_IP} in ingress files [ci skip]" || echo "No changes to commit"
                            git push https://${GIT_USER}:${GIT_PASS}@github.com/shashank6613/TailWindApp.git HEAD:feature
                        '''
                        echo "‚úÖ Changes pushed to repo."
                    }
                }
            }
        }

        stage('Wait for Prometheus & Alertmanager Pods') {
            steps {
                script {
                    withAWS(credentials: 'aws-creds', region: REGION) {
                        echo "‚è≥ Waiting for Prometheus pod..."
                        timeout(time: 6, unit: 'MINUTES') {
                            waitUntil {
                                sh(script: "kubectl get pods -n monitoring -l app=prometheus -o jsonpath='{.items[*].status.phase}' | grep Running", returnStatus: true) == 0
                            }
                        }
                        echo "‚è≥ Waiting for Alertmanager pod..."
                        timeout(time: 6, unit: 'MINUTES') {
                            waitUntil {
                                sh(script: "kubectl get pods -n monitoring -l app=alertmanager -o jsonpath='{.items[*].status.phase}' | grep Running", returnStatus: true) == 0
                            }
                        }

                        echo "‚úÖ Prometheus & Alertmanager running."
                    }
                }
            }
        }
    }

    post {
        success {
            echo '‚úÖ Post-deployment setup completed successfully.'
        }
        failure {
            echo '‚ùå Post-deployment setup failed. Check logs for details.'
            script {
                echo 'üßπ Cleaning up Docker images, k8 objects at all namespaces, secrets etc...'
                sh ''' 
                    kubectl delete deployments,services,pods,ingress -n default --ignore-not-found=true
                    kubectl delete deployments,services,pods,ingress -n monitoring --ignore-not-found=true
                    kubectl delete deployments,services,pods,ingress -n argocd --ignore-not-found=true
                    kubectl delete svc ingress-nginx-controller -n ingress-nginx || true
                    kubectl delete secret grafana-admin-password -n monitoring --ignore-not-found=true
                    kubectl delete secret db-credentials -n default --ignore-not-found=true
                    helm uninstall ingress-nginx -n ingress-nginx || true
                '''
            }
        }
    }
}













